{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "from Bio import SeqIO\n",
    "\n",
    "class Circos:\n",
    "    def __init__(self, fasta, gffs, gff_keys, links_file, limit_size, cuffdiff_file, misa_file, out_dir, chrs='Chr'):\n",
    "        self.fasta = fasta\n",
    "        self.chrs = chrs\n",
    "        self.out = out_dir\n",
    "        self.gffs = {\"GFF%d\"%(x+1): [gffs[x], gff_keys[x]] for x in range(len(gffs))}\n",
    "        self.links = links_file\n",
    "        self.limit_size = limit_size\n",
    "        self.cuffdiff_file = cuffdiff_file\n",
    "        self.misa_file = misa_file\n",
    "    \n",
    "    def prepare(self):\n",
    "        print(\" [1/5] importando fasta ...\")\n",
    "        self.fasta_dict = SeqIO.to_dict(SeqIO.parse(self.fasta, 'fasta'))\n",
    "        \n",
    "        print(\" [2/5] preparando arquivos em %s ...\" % self.out)\n",
    "        os.mkdir(self.out)\n",
    "        os.link(self.fasta, self.out + '/genome.fa')\n",
    "        for k, v in self.gffs.items():\n",
    "            os.link(v[0], self.out + '/' + k)\n",
    "        self.misa2gff3(self.misa_file, self.out + '/misa.gff3')\n",
    "        self.geneateConfig(chrs=self.chrs)\n",
    "        \n",
    "        print(\" [3/5] importando gffs  \" + self.out)\n",
    "        for k, v in self.gffs.items():\n",
    "            self.gffdensity(self.out + '/' + k, v[1], self.out + '/' + k + '.bars', self.chrs)\n",
    "        self.gffdensity(self.out + '/misa.gff3', 'SSR', self.out + '/misa.bars', self.chrs)\n",
    "            \n",
    "        print(\" [4/5] importando links  \" + self.out)\n",
    "        self.minimize_links(self.links, self.out + '/links', self.limit_size)\n",
    "        \n",
    "        print(\" [5/5] importando gene expression  \" + self.out)\n",
    "        for f in self.importGeneExp(self.cuffdiff_file, self.out, self.chrs):\n",
    "            self.normWindow(f, f + \".norm\")\n",
    "        print(\"run circos --config circos.config ... \")\n",
    "    \n",
    "    def karyotype(self, out, chrs='Chr'):\n",
    "        print(\"file\" + out + ' ... OK!')\n",
    "        with open(out, 'w') as o:\n",
    "            for c in [c for c in self.fasta_dict if c.startswith(chrs)]:\n",
    "                o.write('chr\\t-\\t%s\\t%s\\t0\\t%d\\tgreen\\n' % (c, c, len(self.fasta_dict[c])))\n",
    "        return out\n",
    "    \n",
    "    def geneateConfig(self, chrs='Chr', rewrite=False):\n",
    "        self.karyotype(self.out + '/genome.karyotype', chrs)\n",
    "        \n",
    "        conf = \"\"\"\n",
    "<<include etc/colors_fonts_patterns.conf>>\n",
    "<<include ideogram.conf>>\n",
    "<<include ticks.conf>>\n",
    "<<include colors.brewer.conf>>\n",
    "<<include colors.conf>>\n",
    "<image>\n",
    "    <<include etc/image.conf>>\n",
    "</image>\n",
    "chromosomes_units           = 1000000\n",
    "chromosomes_display_default = yes\n",
    "chromosomes_color  = /.*/:piyg-3-div-3\n",
    "karyotype = genome.karyotype\n",
    "<links>\n",
    "    <link>\n",
    "        file          = links\n",
    "        radius        = 0.3r\n",
    "        color         = piyg-3-div-1\n",
    "        bezier_radius = 0.1r\n",
    "        thickness     = 1\n",
    "        ribbon = yes\n",
    "        <rules>\n",
    "            <rule>\n",
    "                condition  = var(intrachr) && abs(var(pos1)-var(pos2)) > 50Kb\n",
    "                color        = piyg-3-div-2\n",
    "            </rule>\n",
    "            <rule>\n",
    "                condition  = var(intrachr) && abs(var(pos1)-var(pos2)) > 60Kb\n",
    "                color        = piyg-3-div-3\n",
    "            </rule>\n",
    "        </rules>\n",
    "    </link>\n",
    "</links>\n",
    "<plots>\n",
    "    <plot>\n",
    "        type      = scatter\n",
    "        file      = misa.bars\n",
    "        r0        = 0.31r\n",
    "        r1        = 0.36r\n",
    "        color     = piyg-4-div\n",
    "    </plot>\n",
    "    <plot>\n",
    "        type      = heatmap\n",
    "        file      = flor_folha.heatmap.norm\n",
    "        r0        = 0.37r\n",
    "        r1        = 0.42r\n",
    "        color     = piyg-4-div\n",
    "        stroke_thickness = 1\n",
    "        stroke_color     = black\n",
    "    </plot>\n",
    "    <plot>\n",
    "        type      = heatmap\n",
    "        file      = flor_fruto.heatmap.norm\n",
    "        r0        = 0.42r\n",
    "        r1        = 0.47r\n",
    "        color     = piyg-4-div\n",
    "        stroke_thickness = 1\n",
    "        stroke_color     = black\n",
    "    </plot>\n",
    "    <plot>\n",
    "        type      = heatmap\n",
    "        file      = folha_fruto.heatmap.norm\n",
    "        r0        = 0.47r\n",
    "        r1        = 0.52r\n",
    "        color     = piyg-4-div\n",
    "        stroke_thickness = 1\n",
    "        stroke_color     = black\n",
    "    </plot>\n",
    "    <plot>\n",
    "        type      = histogram\n",
    "        file      = GFF1.bars\n",
    "        r0        = 0.53r\n",
    "        r1        = 0.63r\n",
    "        stroke_type = outline\n",
    "        thickness   = 4\n",
    "        color       = lgrey\n",
    "        fill_color = lgrey\n",
    "        extend_bin  = yes\n",
    "    </plot>\n",
    "    <plot>\n",
    "        type      = line\n",
    "        file      = GFF2.bars\n",
    "        r0        = 0.53r\n",
    "        r1        = 0.63r\n",
    "        stroke_type = outline\n",
    "        thickness   = 4\n",
    "        extend_bin  = yes\n",
    "        color       = piyg-3-div-2\n",
    "        <rules>\n",
    "            <rule>\n",
    "                condition    = var(value) > 50\n",
    "                color        = piyg-3-div-3\n",
    "            </rule>\n",
    "            <rule>\n",
    "                condition    = var(value) < 25\n",
    "                color        = piyg-3-div-1\n",
    "            </rule>\n",
    "        </rules>\n",
    "    </plot>\n",
    "</plots>\n",
    "<<include etc/housekeeping.conf>>\n",
    "        \"\"\"\n",
    "\n",
    "        ideogram = \"\"\"\n",
    "<ideogram>\n",
    "    <spacing>\n",
    "        default = 0.0025r\n",
    "        break   = 0.5r\n",
    "    </spacing>\n",
    "<<include ideogram.position.conf>>\n",
    "<<include ideogram.label.conf>>\n",
    "</ideogram>\n",
    "        \"\"\"\n",
    "        \n",
    "        label = \"\"\"\n",
    "show_label       = yes\n",
    "label_font       = default\n",
    "label_radius     = 0.63r\n",
    "label_with_tag   = yes\n",
    "label_size       = 36\n",
    "label_parallel   = yes\n",
    "#label_case       = lower\n",
    "label_format     = eval(sprintf(\"%s\", replace(var(label), \"Chr\", \"LG\") ))\n",
    "    \"\"\"\n",
    "        \n",
    "        position = \"\"\"\n",
    "radius           = 1.5r\n",
    "thickness        = 30p\n",
    "fill             = yes\n",
    "stroke_thickness = 2\n",
    "stroke_color     = black\n",
    "    \"\"\"\n",
    "        ticks = \"\"\"\n",
    "show_ticks          = no\n",
    "show_tick_labels    = no\n",
    "<ticks>\n",
    "    skip_first_label = no\n",
    "    skip_last_label  = no\n",
    "    radius           = dims(ideogram,radius_outer)\n",
    "    tick_separation  = 2p\n",
    "    label_separation = 5p\n",
    "    multiplier       = 1e-6\n",
    "    color            = black\n",
    "    thickness        = 4p\n",
    "    size             = 20p\n",
    "    <tick>\n",
    "        spacing        = 1u\n",
    "        show_label     = no\n",
    "        thickness      = 2p\n",
    "        color          = dgrey\n",
    "    </tick>\n",
    "    <tick>\n",
    "        spacing        = 5u\n",
    "        show_label     = no\n",
    "        thickness      = 3p\n",
    "        color          = vdgrey\n",
    "    </tick>\n",
    "    <tick>\n",
    "        spacing        = 10u\n",
    "        show_label     = yes\n",
    "        label_size     = 20p\n",
    "        label_offset   = 10p\n",
    "        format         = %d\n",
    "        grid           = yes\n",
    "        grid_color     = dgrey\n",
    "        grid_thickness = 1p\n",
    "        grid_start     = 0.5r\n",
    "        grid_end       = 0.999r\n",
    "    </tick>\n",
    "</ticks>\n",
    "    \"\"\"\n",
    "\n",
    "        colors = \"\"\"\n",
    "<colors>\n",
    " chrs = 254,158,218\n",
    "</colors>\"\"\"\n",
    "\n",
    "        def persist(file, var):\n",
    "            if not rewrite and os.path.exists(file) and os.path.isfile(file):\n",
    "                raise BaseException('ERROR: file ' + file + ' EXISTIS! call with REWRITE arg!')\n",
    "            with open(file, 'w') as o:\n",
    "                o.write(var)\n",
    "            print('file %s ... OK' % file)\n",
    "\n",
    "        persist(self.out + '/circos.conf', conf)\n",
    "        persist(self.out + '/ideogram.conf', ideogram)\n",
    "        persist(self.out + '/ideogram.label.conf', label)\n",
    "        persist(self.out + '/ideogram.position.conf', position)\n",
    "        persist(self.out + '/ticks.conf', ticks)\n",
    "        persist(self.out + '/colors.conf', colors)\n",
    "    \n",
    "    def minimize_links(self, file, out, limitMIN=10):\n",
    "        seg_dup = [l.strip().split('\\t') for l in open(file).readlines() if not l.startswith('#')]\n",
    "        ss = [(x[0], int(x[1]), int(x[2]), int(x[2]) - int(x[1]), x[3], x[4], x[5]) for x in seg_dup if len(x) == 6]\n",
    "        links = [x for x in ss if x[3] > limitMIN * 1000]\n",
    "        with open(out, 'w') as o:\n",
    "            for l in links:\n",
    "                o.write(\"%s\\t%d\\t%d\\t%s\\t%s\\t%s\\n\" % (l[0], l[1], l[2], l[4], l[5], l[6]))\n",
    "        print(\"%d writed in %s ....\" % (len(links), out))\n",
    "    \n",
    "        \n",
    "    def run(self):\n",
    "        print('iniciando ...')\n",
    "        self.prepare()\n",
    "        \n",
    "\n",
    "    def gffdensity(self, gff, keys, out, chrs='Chr', window=100000):\n",
    "        print(\"importando %s ...\" % keys)\n",
    "        genes = [l.strip().split('\\t') for l in open(gff).readlines() if l.count(\"\\t\" + keys + \"\\t\") > 0]\n",
    "        print(\"parseando %s ...\" % keys)\n",
    "        chr2genes = {x: [(int(y[3]),int(y[4])) for y in genes if y[0] == x] for x in set([x[0] for x in genes])}\n",
    "        print(\"salvando em \" + out + ' ...')\n",
    "        with open(out, 'w') as o:\n",
    "            for c in [c for c in self.fasta_dict if c.startswith(chrs) and c in chr2genes]:\n",
    "                ranges = list(sorted(set(list(range(1, len(self.fasta_dict[c]), window)) + [len(self.fasta_dict[c])+1])))\n",
    "                for i in range(1, len(ranges)):\n",
    "                    o.write('%s\\t%d\\t%d\\t%d\\n' % (c, ranges[i-1], ranges[i]-1, len([x for x in chr2genes[c] if \n",
    "                          (x[0] >= ranges[i-1] and x[0] <= ranges[i]-1) or \n",
    "                          (x[1] >= ranges[i-1] and x[1] <= ranges[i]-1)])))\n",
    "    \n",
    "    def misa2gff3(self,file, out):\n",
    "        k = [l.strip().split(\"\\t\") for l in open(file).readlines() if l.count('\\t') > 0]\n",
    "        if k[0] == 'ID\\tSSR nr.\\tSSR type\\tSSR\\tsize\\tstart\\tend'.split(\"\\t\"):\n",
    "            with open(out, 'w') as o:\n",
    "                o.write('\\n'.join(['\\t'.join([\n",
    "                    x[0], \n",
    "                    'misa', \n",
    "                    'SSR', \n",
    "                    x[5], \n",
    "                    x[6], \n",
    "                    '.', '.', '.', \n",
    "                    'ID=' + x[2] + '.' + x[0] + '.' + x[1]]) for x in k[1:]]) +'\\n')\n",
    "        else:\n",
    "            raise BaseException('File ' + file + ' not of misa output!')\n",
    "\n",
    "    \n",
    "    def importGeneExp(self, file, out_dir='./', chrs=None):\n",
    "        header = 'test_id\\tgene_id\\tgene\\tlocus\\tsample_1\\tsample_2\\tstatus\\tvalue_1\\tvalue_2\\tlog2(fold_change)\\ttest_stat\\tp_value\\tq_value\\tsignificant'.split('\\t')\n",
    "        lines = [x.strip().split(\"\\t\") for x in open(file).readlines() if x.count(\"\\t\") > 3]\n",
    "        if lines[0] != header:\n",
    "            raise BaseException('Header NOT OK, verify if file is from CUFFDIFF %s' % file)\n",
    "\n",
    "        ls = [(x[3],'_'.join(sorted([x[4],x[5]])),float(x[9]),float(x[12]), x[13] == 'yes') for x in lines[1:]]\n",
    "        condicoes = {x: [y for y in ls if y[1] == x] for x in set([z[1] for z in ls])}\n",
    "        files = []\n",
    "        for k, v in condicoes.items():\n",
    "            with open(out_dir + '/' + k + '.heatmap', 'w') as o:\n",
    "                ls = [(x[0].replace(':', '\\t').replace('-', '\\t'), str(x[2])) for x in v if x[4] and (chrs is None or x[0].startswith(chrs))]\n",
    "                o.write('\\n'.join(['\\t'.join(x) for x in ls]) + '\\n')\n",
    "                print('file %s ... OK' % (out_dir + '/' + k + '.heatmap'))\n",
    "                files.append(out_dir + '/' + k + '.heatmap')\n",
    "        return files\n",
    "    \n",
    "    def normWindow(self, file, out):\n",
    "        fasta = self.fasta_dict\n",
    "        ls = [l.strip().split(\"\\t\") for l in open(file).readlines() if l.count(\"\\t\") > 0]\n",
    "        chr2exp = {x: [(int(z[1]), int(z[2]), abs(float(z[3]))) for z in ls if z[0] == x] for x in set([y[0] for y in ls])}\n",
    "        window = 10 * 10000\n",
    "        with open(out, 'w') as o:\n",
    "            for c in [c for c in fasta if c in chr2exp]:\n",
    "                ranges = list(sorted(set(list(range(1, len(fasta[c]), window)) + [len(fasta[c])+1])))\n",
    "                for i in range(1, len(ranges)):\n",
    "                    t = [x[2] for x in chr2exp[c] if \n",
    "                          (x[0] >= ranges[i-1] and x[0] <= ranges[i]-1) or \n",
    "                          (x[1] >= ranges[i-1] and x[1] <= ranges[i]-1)]\n",
    "                    o.write('%s\\t%d\\t%d\\t%f\\n' % (c, ranges[i-1], ranges[i]-1, sum(t)/len(t) if len(t) > 0 else 0))\n",
    "                    \n",
    "                    \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = Circos(\n",
    "    'guava.fa', \n",
    "    ['guava.gff3', 'guava.gff3'], \n",
    "    ['gene', 'CDS'], \n",
    "    'seg_dup.links', \n",
    "    40, \n",
    "    '../gene_exp_diff.folha.flor.fruto.RNA-SEQ.cuffdiff.tsv',\n",
    "    '../repet/misa/misa/guava.fa.misa',\n",
    "    'circos_chr2', \n",
    "    chrs='Chr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iniciando ...\n",
      " [1/5] importando fasta ...\n",
      " [2/5] preparando arquivos em circos_chr2 ...\n",
      "filecircos_chr2/genome.karyotype ... OK!\n",
      "file circos_chr2/circos.conf ... OK\n",
      "file circos_chr2/ideogram.conf ... OK\n",
      "file circos_chr2/ideogram.label.conf ... OK\n",
      "file circos_chr2/ideogram.position.conf ... OK\n",
      "file circos_chr2/ticks.conf ... OK\n",
      "file circos_chr2/colors.conf ... OK\n",
      " [3/5] importando gffs  circos_chr2\n",
      "importando gene ...\n",
      "parseando gene ...\n",
      "salvando em circos_chr2/GFF1.bars ...\n",
      "importando CDS ...\n",
      "parseando CDS ...\n",
      "salvando em circos_chr2/GFF2.bars ...\n",
      "importando SSR ...\n",
      "parseando SSR ...\n",
      "salvando em circos_chr2/misa.bars ...\n",
      " [4/5] importando links  circos_chr2\n",
      "236 writed in circos_chr2/links ....\n",
      " [5/5] importando gene expression  circos_chr2\n",
      "file circos_chr2/flor_fruto.heatmap ... OK\n",
      "file circos_chr2/folha_fruto.heatmap ... OK\n",
      "file circos_chr2/flor_folha.heatmap ... OK\n"
     ]
    }
   ],
   "source": [
    "a.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "rm circos_chr3/ -r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = Circos(\n",
    "    'guava.fa', \n",
    "    ['guava.gff3', 'guava.gff3'], \n",
    "    ['gene', 'CDS'], \n",
    "    'seg_dup.links.scf', \n",
    "    40, \n",
    "    '../gene_exp_diff.folha.flor.fruto.RNA-SEQ.cuffdiff.tsv',\n",
    "    '../repet/misa/misa/guava.fa.misa',\n",
    "    'circos_chr3', \n",
    "    chrs='pg.scf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iniciando ...\n",
      " [1/5] importando fasta ...\n",
      " [2/5] preparando arquivos em circos_chr3 ...\n",
      "filecircos_chr3/genome.karyotype ... OK!\n",
      "file circos_chr3/circos.conf ... OK\n",
      "file circos_chr3/ideogram.conf ... OK\n",
      "file circos_chr3/ideogram.label.conf ... OK\n",
      "file circos_chr3/ideogram.position.conf ... OK\n",
      "file circos_chr3/ticks.conf ... OK\n",
      "file circos_chr3/colors.conf ... OK\n",
      " [3/5] importando gffs  circos_chr3\n",
      "importando gene ...\n",
      "parseando gene ...\n",
      "salvando em circos_chr3/GFF1.bars ...\n",
      "importando CDS ...\n",
      "parseando CDS ...\n",
      "salvando em circos_chr3/GFF2.bars ...\n",
      "importando SSR ...\n",
      "parseando SSR ...\n",
      "salvando em circos_chr3/misa.bars ...\n",
      " [4/5] importando links  circos_chr3\n",
      "1896 writed in circos_chr3/links ....\n",
      " [5/5] importando gene expression  circos_chr3\n",
      "file circos_chr3/flor_fruto.heatmap ... OK\n",
      "file circos_chr3/folha_fruto.heatmap ... OK\n",
      "file circos_chr3/flor_folha.heatmap ... OK\n",
      "preparando ... OK! \n"
     ]
    }
   ],
   "source": [
    "b.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
